#!/usr/bin/env python3
"""========================================================================
Purpose:
    The purpose of this script is to experiment with the RK4 and
    interpolation schemes for back tracking a particle.

Author:
    Emilio Torres
========================================================================"""
#=========================================================================#
# Preamble                                                                #
#=========================================================================#
#-------------------------------------------------------------------------#
# Python packages                                                         #
#-------------------------------------------------------------------------#
import os
import sys
from subprocess import call
from numpy import zeros, linspace, pi, load
from scipy.interpolate import RegularGridInterpolator  as Reginterp
#-------------------------------------------------------------------------#
# User packages                                                           #
#-------------------------------------------------------------------------#
from tracking import location_adjustment
#=========================================================================#
# User defined functions                                                  #
#=========================================================================#
#-------------------------------------------------------------------------#
# Ghost cells                                                             #
#-------------------------------------------------------------------------#
def ghost_cells(
        uF):

    """ Adding in ghost cells for -dx/2 and 2*pi + dx/2 """
    #---------------------------------------------------------------------#
    # Preallocating space                                                 #
    #---------------------------------------------------------------------#
    dim     = uF.shape
    field   = zeros((dim[0] + 2, dim[1] + 2,  dim[2] + 2, dim[3]))
    #---------------------------------------------------------------------#
    # Interior points                                                     #
    #---------------------------------------------------------------------#
    for k in range(0,64):
        for j in range(0,64):
            for i in range(0,64):
                field[i+1,j+1,k+1]    = uF[i, j, k]
    #---------------------------------------------------------------------#
    # x1 direction points                                                 #
    #---------------------------------------------------------------------#
    for k in range(0, 66):
        for j in range(0, 66):
            field[0,j,k]    = field[64,j,k]
            field[65,j,k]   = field[1,j,k]
    #---------------------------------------------------------------------#
    # x2 direction points                                                 #
    #---------------------------------------------------------------------#
    for k in range(0, 66):
        for i in range(0, 66):
            field[i,0,k]    = field[i,64,k]
            field[i,65,k]   = field[i,1,k]
    #---------------------------------------------------------------------#
    # x3 direction points                                                 #
    #---------------------------------------------------------------------#
    for j in range(0, 66):
        for i in range(0, 66):
            field[i,j,0]    = field[i,j,64]
            field[i,j,65]   = field[i,j,1]

    return field
#-------------------------------------------------------------------------#
# RK4 back tracking                                                       #
#-------------------------------------------------------------------------#
def rk4_back_tracking(
        init_vec,
        uF1,
        uF2,
        uF3,
        X,
        Y,
        Z,
        Time,
        tf,
        tn):

    """ Back tracking particle subroutine """
    #---------------------------------------------------------------------#
    # Interpolating function                                              #
    #---------------------------------------------------------------------#
    u1func  = Reginterp((X,Y,Z,Time), uF1, method='linear')
    u2func  = Reginterp((X,Y,Z,Time), uF2, method='linear')
    u3func  = Reginterp((X,Y,Z,Time), uF3, method='linear')
    #---------------------------------------------------------------------#
    # Initial conditions                                                  #
    #---------------------------------------------------------------------#
    x1_0    = init_vec[0]
    x2_0    = init_vec[1]
    x3_0    = init_vec[2]
    t       = init_vec[3]
    #=====================================================================#
    # Print statements                                                    #
    #=====================================================================#
    out     = ''
    output  = '%s %s %s %s\n'       %('time'.center(20), 'x1'.center(20),\
                                        'x2'.center(20), 'x3'.center(20))
    output  += '%20.16f %20.16f %20.16f %20.16f\n'\
                                    %(t, x1_0, x2_0, x3_0)
    #=====================================================================#
    # RK4 back tracking                                                   #
    #=====================================================================#
    for i in range(tf, tn, -1):
        print(i)
        dt = abs(Time[i] - Time[i-1])
        #-----------------------------------------------------------------#
        # K_{i,1}                                                         #
        #-----------------------------------------------------------------#
        k11     = u1func((x1_0, x2_0, x3_0, t))
        k21     = u2func((x1_0, x2_0, x3_0, t))
        k31     = u3func((x1_0, x2_0, x3_0, t))
        #-----------------------------------------------------------------#
        # K_{i,2}                                                         #
        #-----------------------------------------------------------------#
        k12     = u1func((x1_0 - 0.5*dt*k11, x2_0 - 0.5*dt*k21, \
                            x3_0 - 0.5*dt*k31, t - 0.5*dt))
        k22     = u2func((x1_0 - 0.5*dt*k11, x2_0 - 0.5*dt*k21, \
                            x3_0 - 0.5*dt*k31, t - 0.5*dt))
        k32     = u3func((x1_0 - 0.5*dt*k11, x2_0 - 0.5*dt*k21, \
                            x3_0 - 0.5*dt*k31, t - 0.5*dt))
        #-----------------------------------------------------------------#
        # K_{i,3}                                                         #
        #-----------------------------------------------------------------#
        k13     = u1func((x1_0 - 0.5*dt*k12, x2_0 - 0.5*dt*k22, \
                            x3_0 - 0.5*dt*k32, t - 0.5*dt))
        k23     = u2func((x1_0 - 0.5*dt*k12, x2_0 - 0.5*dt*k22, \
                            x3_0 - 0.5*dt*k32, t - 0.5*dt))
        k33     = u3func((x1_0 - 0.5*dt*k12, x2_0 - 0.5*dt*k22, \
                            x3_0 - 0.5*dt*k32, t - 0.5*dt))
        #-----------------------------------------------------------------#
        # K_{i,4}                                                         #
        #-----------------------------------------------------------------#
        k14     = u1func((x1_0 - dt*k13, x2_0 - dt*k23, \
                            x3_0 - dt*k33, t - dt))
        k24     = u2func((x1_0 - dt*k13, x2_0 - dt*k23, \
                            x3_0 - dt*k33, t - dt))
        k34     = u3func((x1_0 - dt*k13, x2_0 - dt*k23, \
                            x3_0 - dt*k33, t - dt))
        #-----------------------------------------------------------------#
        # Back tracking                                                   #
        #-----------------------------------------------------------------#
        x1      = x1_0 - (dt/6.0) * (k11 + 2.*k12 + 2.*k13 + k14)
        x2      = x2_0 - (dt/6.0) * (k21 + 2.*k22 + 2.*k23 + k24)
        x3      = x3_0 - (dt/6.0) * (k31 + 2.*k32 + 2.*k33 + k34)
        #-----------------------------------------------------------------#
        # Updating values                                                 #
        #-----------------------------------------------------------------#
        t       = Time[i-1]
        x1_0    = location_adjustment(x1)
        x2_0    = location_adjustment(x2)
        x3_0    = location_adjustment(x3)
        #-----------------------------------------------------------------#
        # Print statement                                                 #
        #-----------------------------------------------------------------#
        out +=  'time = %20.16f ---> %20.16f ---> %20.16f\n'    %(t, t-dt, time[i-1])
        out +=  'x1 = %20.16f ---> %20.16f\n'                   %(x1_0, x1)
        out +=  'x2 = %20.16f ---> %20.16f\n'                   %(x2_0, x2)
        out +=  'x3 = %20.16f ---> %20.16f\n'                   %(x3_0, x3)
        out +=  '\n'
        #-----------------------------------------------------------------#
        # Print of points                                                 #
        #-----------------------------------------------------------------#
        output  += '%20.16f %20.16f %20.16f %20.16f\n'\
                        %(t, x1, x2, x3)
    #---------------------------------------------------------------------#
    # Storing print out                                                   #
    #---------------------------------------------------------------------#
    f   = open('back-tracking-printout-2.out', 'w')
    f.write(out)
    f.close()
    #---------------------------------------------------------------------#
    # Storing output                                                      #
    #---------------------------------------------------------------------#
    f   = open('back-tracking-output-2.out', 'w')
    f.write(output)
    f.close()

    return
#=========================================================================#
# Main                                                                    #
#=========================================================================#
if __name__ == '__main__':
    #---------------------------------------------------------------------#
    # Main preamble                                                       #
    #---------------------------------------------------------------------#
    call(['clear'])
    sep             = os.sep
    pwd             = os.getcwd()
    media_path      = pwd + '%c..%cmedia%c'         %(sep, sep, sep)
    data_path       = pwd + '%c..%cdata%c'          %(sep, sep, sep)
    #---------------------------------------------------------------------#
    # Loading data                                                        #
    #---------------------------------------------------------------------#
    print('Loading data:')
    u1      = load(data_path + 'velocity1.npy')
    u1      = ghost_cells(u1)
    print('\tvelocity-1')
    u2      = load(data_path + 'velocity2.npy')
    u2      = ghost_cells(u2)
    print('\tvelocity-2')
    u3      = load(data_path + 'velocity3.npy')
    u3      = ghost_cells(u3)
    print('\tvelocity-3')
    time    = load(data_path + 'time.npy')
    print('\ttime')
    #---------------------------------------------------------------------#
    # Domain variables                                                    #
    #---------------------------------------------------------------------#
    dx  = 2.0*pi/float(64)
    x   = linspace(-0.5*dx, 2.0*pi+0.5*dx, 66)
    y   = linspace(-0.5*dx, 2.0*pi+0.5*dx, 66)
    z   = linspace(-0.5*dx, 2.0*pi+0.5*dx, 66)
    #---------------------------------------------------------------------#
    # Initial start point                                                 #
    #---------------------------------------------------------------------#
    t0  = 9.99118685937552797327
    x0  = 3.20487362160583000303
    y0  = 3.48194993096142768607
    z0  = 6.07446661175028790325
    #---------------------------------------------------------------------#
    # Back tracking                                                       #
    #---------------------------------------------------------------------#
    rk4_back_tracking([x0, y0, z0, t0], u1, u2, u3, \
                        x, y, z, time, 455, 0)

    print('**** Successful run ****')
    sys.exit(0)
